initSidebarItems({"enum":[["ConsumerMessage","Sent from [`NodeManager`] to any consumer node in order to let them connect and disconnect from `stream producers`"],["Node","All the node types NodeManager supports"],["NodeStatusMessage","Sent from [`Node`] to [`NodeManager`] so that it can inform listeners of nodesâ€™ status"]],"struct":[["CommandMessage","Sent from `controllers`, this is our public interface."],["DestinationCommandMessage","Destination-specific commands, sent from [`NodeManager`] to [`Destination`]"],["GetNodeInfoMessage","Retrieves node-specific information. Sent from [`NodeManager`] to any [`Node`]."],["GetProducerMessage","Getter for `stream producers`, sent from [`NodeManager`] to any producer node to connect them to consumers"],["MixerCommandMessage","Mixer-specific commands, sent from [`NodeManager`] to [`Mixer`]"],["NodeManager","NodeManager acts as a tracker of all nodes, and dispatches messages accordingly"],["RegisterListenerMessage","Sent from any [`NodeStatusMessage`] recipient to [`NodeManager`] to register a state listener"],["ScheduleMessage","Reschedule a node, sent from [`NodeManager`] to any [`Node`]"],["SourceCommandMessage","Source-specific commands, sent from [`NodeManager`] to [`Source`]"],["StartMessage","Start a node, sent from [`NodeManager`] to any [`Node`]"],["StopMessage","Sent from [`NodeManager`] to any [`Node`] in order to make it initiate orderly teardown immediately."],["StoppedMessage","A node has stopped, sent from any node to [`NodeManager`]"]]});