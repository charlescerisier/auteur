initSidebarItems({"enum":[["StateChangeResult","Controls how to schedule future state changes after a successful transtion"]],"fn":[["get_now","In normal operation, now is the actual system time"],["make_element","Wrapper around `gst::ElementFactory::make` with a better error message"]],"struct":[["BusMessage","Maps GStreamer messages for consumption by a [`PipelineManager`] actor"],["ErrorMessage","Sent from [`PipelineManager`] to nodes to signal an error"],["PipelineManager","A wrapper around [`gst::Pipeline`] for monitoring its bus. May send messages to signal an error to an appropriate recipient (typically the creator node)"],["StateMachine","State machine governing the progression of a `node` state along a timeline"],["StopManagerMessage","Sent from nodes to [`PipelineManager`] to tear it down"],["StreamConsumer","Wrapper around a consumerâ€™s `appsrc`"],["StreamConsumers","Wrapper around a HashMap of consumers, exists for thread safety and also protects some of the producer state"],["StreamProducer","The interface for transporting media data from one node to another."],["WaitForEosMessage","Sent from nodes to [`PipelineManager`] to wait for EOS to have been processed by the pipeline"]],"trait":[["Schedulable","(`Nodes`)[crate::node] should implement this trait in order to drive their state progression."]]});